node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "cond/Merge"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "output"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "input"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_0"
  op: "Identity"
  input: "strided_slice"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "output"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_0"
  op: "Identity"
  input: "strided_slice_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "input"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros/shape"
  op: "Pack"
  input: "strided_slice_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/shape"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "zeros"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "ExpandDims"
  input: "output"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "NotEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "NotEqual"
  op: "NotEqual"
  input: "input"
  input: "NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt32"
  op: "Cast"
  input: "NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "ToInt32"
  input: "Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "NotEqual_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "NotEqual_1"
  op: "NotEqual"
  input: "concat"
  input: "NotEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToInt32_1"
  op: "Cast"
  input: "NotEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Sum_1/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "ToInt32_1"
  input: "Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "g\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17192047834396362
      }
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17192047834396362
      }
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "embed/embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "embed/embeddings/Initializer/random_uniform/max"
  input: "embed/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "embed/embeddings/Initializer/random_uniform/RandomUniform"
  input: "embed/embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "embed/embeddings/Initializer/random_uniform"
  op: "Add"
  input: "embed/embeddings/Initializer/random_uniform/mul"
  input: "embed/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "embed/embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embed/embeddings/Assign"
  op: "Assign"
  input: "embed/embeddings"
  input: "embed/embeddings/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "embed/embeddings/read"
  op: "Identity"
  input: "embed/embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "embed/embedding_lookup"
  op: "Gather"
  input: "embed/embeddings/read"
  input: "input"
  input: "^add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "embed_1/embedding_lookup"
  op: "Gather"
  input: "embed/embeddings/read"
  input: "concat"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "concat_1/values_0"
  input: "range"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "embed/embedding_lookup"
  input: "concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/GRUCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/GRUCellZeroState/ExpandDims"
  input: "rnn/GRUCellZeroState/Const"
  input: "rnn/GRUCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/zeros"
  op: "Fill"
  input: "rnn/GRUCellZeroState/concat"
  input: "rnn/GRUCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/GRUCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "rnn/Shape_1"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1"
  op: "StridedSlice"
  input: "rnn/Shape_1"
  input: "rnn/strided_slice_1/stack"
  input: "rnn/strided_slice_1/stack_1"
  input: "rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Shape_2"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2"
  op: "StridedSlice"
  input: "rnn/Shape_2"
  input: "rnn/strided_slice_2/stack"
  input: "rnn/strided_slice_2/stack_1"
  input: "rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice_2"
  input: "rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/ExpandDims"
  input: "rnn/Const"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "transpose"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/GRUCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08314109593629837
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08314109593629837
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/max"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias"
  input: "rnn/gru_cell/gates/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_2"
  input: "rnn/while/rnn/gru_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/rnn/gru_cell/concat"
  input: "rnn/while/rnn/gru_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/rnn/gru_cell/MatMul"
  input: "rnn/while/rnn/gru_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/rnn/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/split/split_dim"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/split"
  op: "Split"
  input: "rnn/while/rnn/gru_cell/split/split_dim"
  input: "rnn/while/rnn/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/mul"
  op: "Mul"
  input: "rnn/while/rnn/gru_cell/split"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0990147516131401
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0990147516131401
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias"
  input: "rnn/gru_cell/candidate/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/concat_1/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/concat_1"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/rnn/gru_cell/mul"
  input: "rnn/while/rnn/gru_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/MatMul_1/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/MatMul_1"
  op: "MatMul"
  input: "rnn/while/rnn/gru_cell/concat_1"
  input: "rnn/while/rnn/gru_cell/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/BiasAdd_1/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "rnn/while/rnn/gru_cell/MatMul_1"
  input: "rnn/while/rnn/gru_cell/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/Tanh"
  op: "Tanh"
  input: "rnn/while/rnn/gru_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/mul_1"
  op: "Mul"
  input: "rnn/while/rnn/gru_cell/split:1"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/sub/x"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/sub"
  op: "Sub"
  input: "rnn/while/rnn/gru_cell/sub/x"
  input: "rnn/while/rnn/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/mul_2"
  op: "Mul"
  input: "rnn/while/rnn/gru_cell/sub"
  input: "rnn/while/rnn/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/rnn/gru_cell/add"
  op: "Add"
  input: "rnn/while/rnn/gru_cell/mul_1"
  input: "rnn/while/rnn/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity"
  input: "rnn/while/rnn/gru_cell/add"
  input: "rnn/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "Add"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/rnn/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "rnn/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/range"
  op: "Range"
  input: "rnn/range/start"
  input: "rnn/Rank"
  input: "rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat_1"
  op: "ConcatV2"
  input: "rnn/concat_1/values_0"
  input: "rnn/range"
  input: "rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "rnn/transpose"
  op: "Transpose"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "TrainingHelper/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "TrainingHelper/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/range"
  op: "Range"
  input: "TrainingHelper/range/start"
  input: "TrainingHelper/Rank"
  input: "TrainingHelper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "TrainingHelper/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TrainingHelper/concat"
  op: "ConcatV2"
  input: "TrainingHelper/concat/values_0"
  input: "TrainingHelper/range"
  input: "TrainingHelper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/transpose"
  op: "Transpose"
  input: "embed_1/embedding_lookup"
  input: "TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/Shape"
  op: "Shape"
  input: "TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "TrainingHelper/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "TrainingHelper/Shape"
  input: "TrainingHelper/strided_slice/stack"
  input: "TrainingHelper/strided_slice/stack_1"
  input: "TrainingHelper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "TrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "TrainingHelper/TensorArrayUnstack/Shape"
  input: "TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "TrainingHelper/TensorArrayUnstack/range/start"
  input: "TrainingHelper/TensorArrayUnstack/strided_slice"
  input: "TrainingHelper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "TrainingHelper/TensorArray"
  input: "TrainingHelper/TensorArrayUnstack/range"
  input: "TrainingHelper/transpose"
  input: "TrainingHelper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "TrainingHelper/strided_slice_1"
  op: "StridedSlice"
  input: "TrainingHelper/transpose"
  input: "TrainingHelper/strided_slice_1/stack"
  input: "TrainingHelper/strided_slice_1/stack_1"
  input: "TrainingHelper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "TrainingHelper/zeros_like"
  op: "ZerosLike"
  input: "TrainingHelper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "TrainingHelper/Size"
  op: "Size"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ToInt32_2"
  op: "Cast"
  input: "zeros"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "end_token"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Size"
  op: "Size"
  input: "ToInt32_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embedding_lookup"
  op: "Gather"
  input: "embed/embeddings/read"
  input: "ToInt32_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice"
  op: "StridedSlice"
  input: "decode/BahdanauAttention/Shape"
  input: "decode/BahdanauAttention/strided_slice/stack"
  input: "decode/BahdanauAttention/strided_slice/stack_1"
  input: "decode/BahdanauAttention/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Range"
  op: "Range"
  input: "decode/BahdanauAttention/SequenceMask/Const"
  input: "decode/BahdanauAttention/strided_slice"
  input: "decode/BahdanauAttention/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Sum"
  input: "decode/BahdanauAttention/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Cast"
  op: "Cast"
  input: "decode/BahdanauAttention/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Less"
  op: "Less"
  input: "decode/BahdanauAttention/SequenceMask/Range"
  input: "decode/BahdanauAttention/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/SequenceMask/Cast_1"
  op: "Cast"
  input: "decode/BahdanauAttention/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape_1"
  op: "Shape"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_1"
  op: "StridedSlice"
  input: "decode/BahdanauAttention/Shape_1"
  input: "decode/BahdanauAttention/strided_slice_1/stack"
  input: "decode/BahdanauAttention/strided_slice_1/stack_1"
  input: "decode/BahdanauAttention/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/BahdanauAttention/ones"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape_2"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_2"
  op: "StridedSlice"
  input: "decode/BahdanauAttention/Shape_2"
  input: "decode/BahdanauAttention/strided_slice_2/stack"
  input: "decode/BahdanauAttention/strided_slice_2/stack_1"
  input: "decode/BahdanauAttention/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Equal"
  op: "Equal"
  input: "decode/BahdanauAttention/strided_slice_1"
  input: "decode/BahdanauAttention/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/All"
  op: "All"
  input: "decode/BahdanauAttention/assert_equal/Equal"
  input: "decode/BahdanauAttention/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "memory_sequence_length and memory tensor batch sizes do not match."
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "memory_sequence_length and memory tensor batch sizes do not match."
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode/BahdanauAttention/assert_equal/All"
  input: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_0"
  input: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_1"
  input: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_2"
  input: "decode/BahdanauAttention/strided_slice_1"
  input: "decode/BahdanauAttention/assert_equal/Assert/Assert/data_4"
  input: "decode/BahdanauAttention/strided_slice_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape_3"
  op: "Shape"
  input: "decode/BahdanauAttention/SequenceMask/Cast_1"
  input: "^decode/BahdanauAttention/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/concat/axis"
  op: "Const"
  input: "^add"
  input: "^decode/BahdanauAttention/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/concat"
  op: "ConcatV2"
  input: "decode/BahdanauAttention/Shape_3"
  input: "decode/BahdanauAttention/ones"
  input: "decode/BahdanauAttention/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/Reshape"
  op: "Reshape"
  input: "decode/BahdanauAttention/SequenceMask/Cast_1"
  input: "decode/BahdanauAttention/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/mul"
  op: "Mul"
  input: "rnn/transpose"
  input: "decode/BahdanauAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/max"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/mul"
  input: "decode/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/memory_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/memory_layer/kernel/Assign"
  op: "Assign"
  input: "decode/memory_layer/kernel"
  input: "decode/memory_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/memory_layer/kernel/read"
  op: "Identity"
  input: "decode/memory_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/axes"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Cast"
  op: "Cast"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/mul"
  op: "Mul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Cast"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Less/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Less"
  op: "Less"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  op: "Cast"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/add"
  op: "Add"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/mul_1"
  op: "Mul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/add_1"
  op: "Add"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/mul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/range"
  op: "Range"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/range/start"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Rank"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  op: "ListDiff"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/range"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Gather"
  op: "Gather"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  op: "Gather"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Prod"
  op: "Prod"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  op: "Prod"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat"
  op: "ConcatV2"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat_1"
  op: "ConcatV2"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/add_1"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/stack"
  op: "Pack"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Prod"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/transpose"
  op: "Transpose"
  input: "decode/BahdanauAttention/mul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape"
  op: "Reshape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/transpose"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  op: "Transpose"
  input: "decode/memory_layer/kernel/read"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  op: "Reshape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/MatMul"
  op: "MatMul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot/concat_2"
  op: "ConcatV2"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Const_2"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/memory_layer/Tensordot"
  op: "Reshape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/MatMul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape_4"
  op: "Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_3/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_3/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_3/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_3"
  op: "StridedSlice"
  input: "decode/BahdanauAttention/Shape_4"
  input: "decode/BahdanauAttention/strided_slice_3/stack"
  input: "decode/BahdanauAttention/strided_slice_3/stack_1"
  input: "decode/BahdanauAttention/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/BahdanauAttention/Shape_5"
  op: "Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_4/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_4/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_4/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/BahdanauAttention/strided_slice_4"
  op: "StridedSlice"
  input: "decode/BahdanauAttention/Shape_5"
  input: "decode/BahdanauAttention/strided_slice_4/stack"
  input: "decode/BahdanauAttention/strided_slice_4/stack_1"
  input: "decode/BahdanauAttention/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat"
  op: "ConcatV2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros"
  op: "Fill"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
  op: "Equal"
  input: "strided_slice_2"
  input: "decode/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
  op: "All"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  input: "decode/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/checked_cell_state"
  op: "Identity"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros"
  input: "^decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat"
  op: "ConcatV2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1"
  op: "Fill"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "decode/BahdanauAttention/strided_slice_4"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1"
  op: "ConcatV2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2"
  op: "Fill"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5"
  op: "ExpandDims"
  input: "decode/BahdanauAttention/strided_slice_4"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/maximum_iterations"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "decode/decoder/TrainingHelperInitialize/Equal/x"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "decode/decoder/TrainingHelperInitialize/Equal"
  input: "decode/decoder/TrainingHelperInitialize/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "decode/decoder/TrainingHelperInitialize/All"
  input: "decode/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "decode/decoder/TrainingHelperInitialize/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "decode/decoder/TrainingHelperInitialize/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "decode/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "TrainingHelper/zeros_like"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^add"
  input: "^decode/decoder/TrainingHelperInitialize/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "TrainingHelper/TensorArray"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decode/decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/zero_suffix_shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 103
      }
    }
  }
}
node {
  name: "decode/decoder/concat/values_0"
  op: "Pack"
  input: "TrainingHelper/Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/concat"
  op: "ConcatV2"
  input: "decode/decoder/concat/values_0"
  input: "decode/decoder/zero_suffix_shape"
  input: "decode/decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/decoder/zeros"
  op: "Fill"
  input: "decode/decoder/concat"
  input: "decode/decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/zero_suffix_shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/concat_1/values_0"
  op: "Pack"
  input: "TrainingHelper/Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/concat_1"
  op: "ConcatV2"
  input: "decode/decoder/concat_1/values_0"
  input: "decode/decoder/zero_suffix_shape_1"
  input: "decode/decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/zeros_1"
  op: "Fill"
  input: "decode/decoder/concat_1"
  input: "decode/decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/LessEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/LessEqual"
  op: "LessEqual"
  input: "decode/decoder/maximum_iterations"
  input: "decode/decoder/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/LogicalOr"
  op: "LogicalOr"
  input: "decode/decoder/TrainingHelperInitialize/Equal"
  input: "decode/decoder/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/zeros_like/Shape"
  op: "Shape"
  input: "decode/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/decoder/zeros_like/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/zeros_like"
  op: "Fill"
  input: "decode/decoder/zeros_like/Shape"
  input: "decode/decoder/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArray/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "decode/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/TensorArray_1/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "decode/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/while/Enter"
  op: "Enter"
  input: "decode/decoder/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_1"
  op: "Enter"
  input: "decode/decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_2"
  op: "Enter"
  input: "decode/decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_3"
  op: "Enter"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/checked_cell_state"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_4"
  op: "Enter"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_5"
  op: "Enter"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_6"
  op: "Enter"
  input: "decode/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_7"
  op: "Enter"
  input: "decode/decoder/TrainingHelperInitialize/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_8"
  op: "Enter"
  input: "decode/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Enter_9"
  op: "Enter"
  input: "decode/decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Merge"
  op: "Merge"
  input: "decode/decoder/while/Enter"
  input: "decode/decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_1"
  op: "Merge"
  input: "decode/decoder/while/Enter_1"
  input: "decode/decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_2"
  op: "Merge"
  input: "decode/decoder/while/Enter_2"
  input: "decode/decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_3"
  op: "Merge"
  input: "decode/decoder/while/Enter_3"
  input: "decode/decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_4"
  op: "Merge"
  input: "decode/decoder/while/Enter_4"
  input: "decode/decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_5"
  op: "Merge"
  input: "decode/decoder/while/Enter_5"
  input: "decode/decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_6"
  op: "Merge"
  input: "decode/decoder/while/Enter_6"
  input: "decode/decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_7"
  op: "Merge"
  input: "decode/decoder/while/Enter_7"
  input: "decode/decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_8"
  op: "Merge"
  input: "decode/decoder/while/Enter_8"
  input: "decode/decoder/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Merge_9"
  op: "Merge"
  input: "decode/decoder/while/Enter_9"
  input: "decode/decoder/while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Const"
  op: "Const"
  input: "^decode/decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/All"
  op: "All"
  input: "decode/decoder/while/Merge_8"
  input: "decode/decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "decode/decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/LoopCond"
  op: "LoopCond"
  input: "decode/decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch"
  op: "Switch"
  input: "decode/decoder/while/Merge"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_1"
  op: "Switch"
  input: "decode/decoder/while/Merge_1"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_2"
  op: "Switch"
  input: "decode/decoder/while/Merge_2"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_3"
  op: "Switch"
  input: "decode/decoder/while/Merge_3"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_4"
  op: "Switch"
  input: "decode/decoder/while/Merge_4"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_5"
  op: "Switch"
  input: "decode/decoder/while/Merge_5"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_6"
  op: "Switch"
  input: "decode/decoder/while/Merge_6"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_7"
  op: "Switch"
  input: "decode/decoder/while/Merge_7"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_8"
  op: "Switch"
  input: "decode/decoder/while/Merge_8"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Switch_9"
  op: "Switch"
  input: "decode/decoder/while/Merge_9"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity"
  op: "Identity"
  input: "decode/decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_1"
  op: "Identity"
  input: "decode/decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_2"
  op: "Identity"
  input: "decode/decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_3"
  op: "Identity"
  input: "decode/decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_4"
  op: "Identity"
  input: "decode/decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_5"
  op: "Identity"
  input: "decode/decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_6"
  op: "Identity"
  input: "decode/decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_7"
  op: "Identity"
  input: "decode/decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_8"
  op: "Identity"
  input: "decode/decoder/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Identity_9"
  op: "Identity"
  input: "decode/decoder/while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat/axis"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  op: "ConcatV2"
  input: "decode/decoder/while/Identity_7"
  input: "decode/decoder/while/Identity_4"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\344\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07761505246162415
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07761505246162415
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat/axis"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
  op: "ConcatV2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  input: "decode/decoder/while/Identity_3"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul"
  op: "MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split/split_dim"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  op: "Split"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split/split_dim"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
  op: "Mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  input: "decode/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\344\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0900450348854065
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0900450348854065
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1/axis"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
  op: "ConcatV2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1"
  op: "MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  op: "Tanh"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1"
  op: "Mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  input: "decode/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub/x"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  op: "Sub"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub/x"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2"
  op: "Mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  op: "Add"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_1"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_2"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  op: "StridedSlice"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  op: "Enter"
  input: "decode/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal"
  op: "Equal"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/All"
  op: "All"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_1: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_1: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/All"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_0"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_4"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  op: "Identity"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul"
  op: "MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims/dim"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims"
  op: "ExpandDims"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10825317353010178
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter"
  op: "Enter"
  input: "decode/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add"
  op: "Add"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  op: "Tanh"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul"
  op: "Mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum/reduction_indices"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  op: "Sum"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  op: "Enter"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less"
  op: "Less"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/Const"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/All"
  op: "All"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must greater than zero."
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Sum:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must greater than zero."
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Sum:0) = "
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/All"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_1"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_2"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1"
  op: "StridedSlice"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const_1"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Range"
  op: "Range"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Cast"
  op: "Cast"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
  op: "Less"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Range"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Const"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  op: "Fill"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul/x"
  op: "Const"
  input: "^decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul"
  op: "Mul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul/x"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select"
  op: "Select"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  op: "Softmax"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims/dim"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
  op: "ExpandDims"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter"
  op: "Enter"
  input: "decode/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul"
  op: "BatchMatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
  op: "Squeeze"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1/axis"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
  op: "ConcatV2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul"
  op: "MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2/concat_dim"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  op: "Identity"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add"
  op: "Add"
  input: "decode/decoder/while/Identity_5"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000g\000\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16116459667682648
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16116459667682648
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/max"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/RandomUniform"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/mul"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/kernel"
  input: "decode/decoder/output_projection_wrapper/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/kernel/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/bias/Assign"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/bias"
  input: "decode/decoder/output_projection_wrapper/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decode/decoder/output_projection_wrapper/bias/read"
  op: "Identity"
  input: "decode/decoder/output_projection_wrapper/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul"
  op: "MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  op: "BiasAdd"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  op: "ArgMax"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  op: "Cast"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  op: "Add"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  op: "All"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "TrainingHelper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "decode/decoder/while/Identity_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/add/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/add"
  op: "Add"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/GreaterEqual/Enter"
  op: "Enter"
  input: "decode/decoder/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/GreaterEqual"
  op: "GreaterEqual"
  input: "decode/decoder/while/add"
  input: "decode/decoder/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/LogicalOr_1"
  op: "LogicalOr"
  input: "decode/decoder/while/LogicalOr"
  input: "decode/decoder/while/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "decode/decoder/while/Identity_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/LogicalAnd"
  op: "LogicalAnd"
  input: "decode/decoder/while/LogicalNot_1"
  input: "decode/decoder/while/LogicalOr_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Shape"
  op: "Shape"
  input: "decode/decoder/while/Identity_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode/decoder/while/add_1/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/add_1"
  op: "Add"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Fill"
  op: "Fill"
  input: "decode/decoder/while/Shape"
  input: "decode/decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select"
  op: "Select"
  input: "decode/decoder/while/LogicalAnd"
  input: "decode/decoder/while/Fill"
  input: "decode/decoder/while/Identity_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select_1/Enter"
  op: "Enter"
  input: "decode/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Select_1"
  op: "Select"
  input: "decode/decoder/while/Identity_8"
  input: "decode/decoder/while/Select_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select_2/Enter"
  op: "Enter"
  input: "decode/decoder/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/Select_2"
  op: "Select"
  input: "decode/decoder/while/Identity_8"
  input: "decode/decoder/while/Select_2/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select_3"
  op: "Select"
  input: "decode/decoder/while/Identity_8"
  input: "decode/decoder/while/Identity_3"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select_4"
  op: "Select"
  input: "decode/decoder/while/Identity_8"
  input: "decode/decoder/while/Identity_4"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Select_5"
  op: "Select"
  input: "decode/decoder/while/Identity_8"
  input: "decode/decoder/while/Identity_6"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decode/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/Select_1"
  input: "decode/decoder/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decode/decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/Select_2"
  input: "decode/decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/add_2/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/while/add_2"
  op: "Add"
  input: "decode/decoder/while/Identity"
  input: "decode/decoder/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration"
  op: "NextIteration"
  input: "decode/decoder/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "decode/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "decode/decoder/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "decode/decoder/while/Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "decode/decoder/while/Select_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_8"
  op: "NextIteration"
  input: "decode/decoder/while/LogicalOr_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/NextIteration_9"
  op: "NextIteration"
  input: "decode/decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit"
  op: "Exit"
  input: "decode/decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_1"
  op: "Exit"
  input: "decode/decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_2"
  op: "Exit"
  input: "decode/decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_3"
  op: "Exit"
  input: "decode/decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_4"
  op: "Exit"
  input: "decode/decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_5"
  op: "Exit"
  input: "decode/decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_6"
  op: "Exit"
  input: "decode/decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_7"
  op: "Exit"
  input: "decode/decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_8"
  op: "Exit"
  input: "decode/decoder/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/while/Exit_9"
  op: "Exit"
  input: "decode/decoder/while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decode/decoder/TensorArray"
  input: "decode/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack/range"
  op: "Range"
  input: "decode/decoder/TensorArrayStack/range/start"
  input: "decode/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "decode/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decode/decoder/TensorArray"
  input: "decode/decoder/TensorArrayStack/range"
  input: "decode/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 103
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decode/decoder/TensorArray_1"
  input: "decode/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "decode/decoder/TensorArrayStack_1/range/start"
  input: "decode/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "decode/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decode/decoder/TensorArray_1"
  input: "decode/decoder/TensorArrayStack_1/range"
  input: "decode/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "decode/decoder/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode/decoder/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/range"
  op: "Range"
  input: "decode/decoder/range/start"
  input: "decode/decoder/Rank"
  input: "decode/decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/concat_2/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/concat_2"
  op: "ConcatV2"
  input: "decode/decoder/concat_2/values_0"
  input: "decode/decoder/range"
  input: "decode/decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/transpose"
  op: "Transpose"
  input: "decode/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "decode/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/Rank_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/range_1/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode/decoder/range_1/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode/decoder/range_1"
  op: "Range"
  input: "decode/decoder/range_1/start"
  input: "decode/decoder/Rank_1"
  input: "decode/decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/concat_3/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decode/decoder/concat_3/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode/decoder/concat_3"
  op: "ConcatV2"
  input: "decode/decoder/concat_3/values_0"
  input: "decode/decoder/range_1"
  input: "decode/decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode/decoder/transpose_1"
  op: "Transpose"
  input: "decode/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "decode/decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice"
  op: "StridedSlice"
  input: "decode_1/BahdanauAttention/Shape"
  input: "decode_1/BahdanauAttention/strided_slice/stack"
  input: "decode_1/BahdanauAttention/strided_slice/stack_1"
  input: "decode_1/BahdanauAttention/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Range"
  op: "Range"
  input: "decode_1/BahdanauAttention/SequenceMask/Const"
  input: "decode_1/BahdanauAttention/strided_slice"
  input: "decode_1/BahdanauAttention/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "Sum"
  input: "decode_1/BahdanauAttention/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Cast"
  op: "Cast"
  input: "decode_1/BahdanauAttention/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Less"
  op: "Less"
  input: "decode_1/BahdanauAttention/SequenceMask/Range"
  input: "decode_1/BahdanauAttention/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/SequenceMask/Cast_1"
  op: "Cast"
  input: "decode_1/BahdanauAttention/SequenceMask/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape_1"
  op: "Shape"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_1"
  op: "StridedSlice"
  input: "decode_1/BahdanauAttention/Shape_1"
  input: "decode_1/BahdanauAttention/strided_slice_1/stack"
  input: "decode_1/BahdanauAttention/strided_slice_1/stack_1"
  input: "decode_1/BahdanauAttention/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/ones"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape_2"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_2"
  op: "StridedSlice"
  input: "decode_1/BahdanauAttention/Shape_2"
  input: "decode_1/BahdanauAttention/strided_slice_2/stack"
  input: "decode_1/BahdanauAttention/strided_slice_2/stack_1"
  input: "decode_1/BahdanauAttention/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Equal"
  op: "Equal"
  input: "decode_1/BahdanauAttention/strided_slice_1"
  input: "decode_1/BahdanauAttention/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/All"
  op: "All"
  input: "decode_1/BahdanauAttention/assert_equal/Equal"
  input: "decode_1/BahdanauAttention/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "memory_sequence_length and memory tensor batch sizes do not match."
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode_1/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "memory_sequence_length and memory tensor batch sizes do not match."
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode_1/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode_1/BahdanauAttention/assert_equal/All"
  input: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_0"
  input: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_1"
  input: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_2"
  input: "decode_1/BahdanauAttention/strided_slice_1"
  input: "decode_1/BahdanauAttention/assert_equal/Assert/Assert/data_4"
  input: "decode_1/BahdanauAttention/strided_slice_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape_3"
  op: "Shape"
  input: "decode_1/BahdanauAttention/SequenceMask/Cast_1"
  input: "^decode_1/BahdanauAttention/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/concat/axis"
  op: "Const"
  input: "^add"
  input: "^decode_1/BahdanauAttention/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/concat"
  op: "ConcatV2"
  input: "decode_1/BahdanauAttention/Shape_3"
  input: "decode_1/BahdanauAttention/ones"
  input: "decode_1/BahdanauAttention/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Reshape"
  op: "Reshape"
  input: "decode_1/BahdanauAttention/SequenceMask/Cast_1"
  input: "decode_1/BahdanauAttention/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/mul"
  op: "Mul"
  input: "rnn/transpose"
  input: "decode_1/BahdanauAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Shape"
  op: "Shape"
  input: "decode_1/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/axes"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Cast"
  op: "Cast"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/mul"
  op: "Mul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Cast"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Less/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Less"
  op: "Less"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  op: "Cast"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/add"
  op: "Add"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/mul_1"
  op: "Mul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/add_1"
  op: "Add"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/mul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/range"
  op: "Range"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/range/start"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Rank"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  op: "ListDiff"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/range"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather"
  op: "Gather"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  op: "Gather"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Prod"
  op: "Prod"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  op: "Prod"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat"
  op: "ConcatV2"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather_1"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_1"
  op: "ConcatV2"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/add_1"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/stack"
  op: "Pack"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Prod"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose"
  op: "Transpose"
  input: "decode_1/BahdanauAttention/mul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape"
  op: "Reshape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  op: "Transpose"
  input: "decode/memory_layer/kernel/read"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  op: "Reshape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/MatMul"
  op: "MatMul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_2"
  op: "ConcatV2"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Gather"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/Const_2"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/memory_layer/Tensordot"
  op: "Reshape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/MatMul"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape_4"
  op: "Shape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_3/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_3/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_3/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_3"
  op: "StridedSlice"
  input: "decode_1/BahdanauAttention/Shape_4"
  input: "decode_1/BahdanauAttention/strided_slice_3/stack"
  input: "decode_1/BahdanauAttention/strided_slice_3/stack_1"
  input: "decode_1/BahdanauAttention/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/Shape_5"
  op: "Shape"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_4/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_4/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_4/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/BahdanauAttention/strided_slice_4"
  op: "StridedSlice"
  input: "decode_1/BahdanauAttention/Shape_5"
  input: "decode_1/BahdanauAttention/strided_slice_4/stack"
  input: "decode_1/BahdanauAttention/strided_slice_4/stack_1"
  input: "decode_1/BahdanauAttention/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat"
  op: "ConcatV2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros"
  op: "Fill"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/concat"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
  op: "Equal"
  input: "strided_slice_2"
  input: "decode_1/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
  op: "All"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Equal"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper attention_wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (strided_slice_2:0) = "
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/All"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  input: "decode_1/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/checked_cell_state"
  op: "Identity"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/GRUCellZeroState/zeros"
  input: "^decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat"
  op: "ConcatV2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1"
  op: "Fill"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "decode_1/BahdanauAttention/strided_slice_4"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1"
  op: "ConcatV2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_3"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2"
  op: "Fill"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/concat_1"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4"
  op: "ExpandDims"
  input: "strided_slice_2"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5"
  op: "ExpandDims"
  input: "decode_1/BahdanauAttention/strided_slice_4"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/maximum_iterations"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "decode_1/decoder/Tile/input"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
          dim {
            size: 1
          }
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "decode_1/decoder/Tile/multiples"
  op: "Pack"
  input: "Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_1/decoder/Tile"
  op: "Tile"
  input: "decode_1/decoder/Tile/input"
  input: "decode_1/decoder/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/zero_suffix_shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 103
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat/values_0"
  op: "Pack"
  input: "Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_1/decoder/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat"
  op: "ConcatV2"
  input: "decode_1/decoder/concat/values_0"
  input: "decode_1/decoder/zero_suffix_shape"
  input: "decode_1/decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros"
  op: "Fill"
  input: "decode_1/decoder/concat"
  input: "decode_1/decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/zero_suffix_shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_1/values_0"
  op: "Pack"
  input: "Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_1/decoder/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_1"
  op: "ConcatV2"
  input: "decode_1/decoder/concat_1/values_0"
  input: "decode_1/decoder/zero_suffix_shape_1"
  input: "decode_1/decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros_1"
  op: "Fill"
  input: "decode_1/decoder/concat_1"
  input: "decode_1/decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/LessEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/LessEqual"
  op: "LessEqual"
  input: "decode_1/decoder/maximum_iterations"
  input: "decode_1/decoder/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/LogicalOr"
  op: "LogicalOr"
  input: "decode_1/decoder/Tile"
  input: "decode_1/decoder/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros_like/Shape"
  op: "Shape"
  input: "decode_1/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/decoder/zeros_like/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/zeros_like"
  op: "Fill"
  input: "decode_1/decoder/zeros_like/Shape"
  input: "decode_1/decoder/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArray/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "decode_1/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode_1/decoder/TensorArray_1/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "decode_1/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter"
  op: "Enter"
  input: "decode_1/decoder/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_1"
  op: "Enter"
  input: "decode_1/decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_2"
  op: "Enter"
  input: "decode_1/decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_3"
  op: "Enter"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/checked_cell_state"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_4"
  op: "Enter"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_5"
  op: "Enter"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_6"
  op: "Enter"
  input: "decode_1/OutputProjectionWrapperZeroState/AttentionWrapperZeroState/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_7"
  op: "Enter"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_8"
  op: "Enter"
  input: "decode_1/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Enter_9"
  op: "Enter"
  input: "decode_1/decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge"
  op: "Merge"
  input: "decode_1/decoder/while/Enter"
  input: "decode_1/decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_1"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_1"
  input: "decode_1/decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_2"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_2"
  input: "decode_1/decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_3"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_3"
  input: "decode_1/decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_4"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_4"
  input: "decode_1/decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_5"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_5"
  input: "decode_1/decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_6"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_6"
  input: "decode_1/decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_7"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_7"
  input: "decode_1/decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_8"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_8"
  input: "decode_1/decoder/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Merge_9"
  op: "Merge"
  input: "decode_1/decoder/while/Enter_9"
  input: "decode_1/decoder/while/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/All"
  op: "All"
  input: "decode_1/decoder/while/Merge_8"
  input: "decode_1/decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "decode_1/decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/LoopCond"
  op: "LoopCond"
  input: "decode_1/decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch"
  op: "Switch"
  input: "decode_1/decoder/while/Merge"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_1"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_1"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_2"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_2"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_3"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_3"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_4"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_4"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_5"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_5"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_6"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_6"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_7"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_7"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_8"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_8"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Switch_9"
  op: "Switch"
  input: "decode_1/decoder/while/Merge_9"
  input: "decode_1/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity"
  op: "Identity"
  input: "decode_1/decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_1"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_2"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_3"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_4"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_5"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_6"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_7"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_8"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Identity_9"
  op: "Identity"
  input: "decode_1/decoder/while/Switch_9:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat/axis"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  op: "ConcatV2"
  input: "decode_1/decoder/while/Identity_7"
  input: "decode_1/decoder/while/Identity_4"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat/axis"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
  op: "ConcatV2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  input: "decode_1/decoder/while/Identity_3"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul"
  op: "MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split/split_dim"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  op: "Split"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split/split_dim"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
  op: "Mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  input: "decode_1/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1/axis"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
  op: "ConcatV2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1"
  op: "MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  op: "Tanh"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1"
  op: "Mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  input: "decode_1/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub/x"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  op: "Sub"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub/x"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2"
  op: "Mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  op: "Add"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape"
  op: "Shape"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_1"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_2"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  op: "StridedSlice"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  op: "Enter"
  input: "decode_1/BahdanauAttention/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal"
  op: "Equal"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/All"
  op: "All"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_2: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper attention_wrapper_2: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (decode_1/BahdanauAttention/strided_slice_3:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert"
  op: "Assert"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/All"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_0"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert/data_4"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Equal/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  op: "Identity"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul"
  op: "MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims/dim"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims"
  op: "ExpandDims"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter"
  op: "Enter"
  input: "decode_1/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add"
  op: "Add"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  op: "Tanh"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul"
  op: "Mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum/reduction_indices"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  op: "Sum"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  op: "Enter"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less"
  op: "Less"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/Const"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/All"
  op: "All"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must greater than zero."
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Sum:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "All values in memory_sequence_length must greater than zero."
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (Sum:0) = "
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/All"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_0"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert/data_2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape_1"
  op: "Shape"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_1"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_2"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1"
  op: "StridedSlice"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Shape_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const_1"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Range"
  op: "Range"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/strided_slice_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Const_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims/dim"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Less/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Cast"
  op: "Cast"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
  op: "Less"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Range"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Shape"
  op: "Shape"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Const"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  op: "Fill"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Shape"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul/x"
  op: "Const"
  input: "^decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul"
  op: "Mul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul/x"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select"
  op: "Select"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  op: "Softmax"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims/dim"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
  op: "ExpandDims"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter"
  op: "Enter"
  input: "decode_1/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul"
  op: "BatchMatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
  op: "Squeeze"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1/axis"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
  op: "ConcatV2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul"
  op: "MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2/concat_dim"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  op: "Identity"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add/y"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add"
  op: "Add"
  input: "decode_1/decoder/while/Identity_5"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul"
  op: "MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  op: "BiasAdd"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/ArgMax/dimension"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/ArgMax"
  op: "ArgMax"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  input: "decode_1/decoder/while/BasicDecoderStep/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/Cast"
  op: "Cast"
  input: "decode_1/decoder/while/BasicDecoderStep/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/Equal/Enter"
  op: "Enter"
  input: "end_token"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/Equal"
  op: "Equal"
  input: "decode_1/decoder/while/BasicDecoderStep/Cast"
  input: "decode_1/decoder/while/BasicDecoderStep/Equal/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/Const"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/All"
  op: "All"
  input: "decode_1/decoder/while/BasicDecoderStep/Equal"
  input: "decode_1/decoder/while/BasicDecoderStep/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/Switch"
  op: "Switch"
  input: "decode_1/decoder/while/BasicDecoderStep/All"
  input: "decode_1/decoder/while/BasicDecoderStep/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/switch_t"
  op: "Identity"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/switch_f"
  op: "Identity"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/pred_id"
  op: "Identity"
  input: "decode_1/decoder/while/BasicDecoderStep/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/Enter"
  op: "Enter"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/Switch_1"
  op: "Switch"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/BasicDecoderStep/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter"
  op: "Enter"
  input: "embed/embeddings/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch"
  op: "Switch"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1"
  op: "Switch"
  input: "decode_1/decoder/while/BasicDecoderStep/Cast"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/BasicDecoderStep/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup"
  op: "Gather"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup/Switch_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "decode_1/decoder/while/BasicDecoderStep/cond/Merge"
  op: "Merge"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/embedding_lookup"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "decode_1/decoder/while/BasicDecoderStep/Equal"
  input: "decode_1/decoder/while/Identity_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/add/y"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/add"
  op: "Add"
  input: "decode_1/decoder/while/Identity"
  input: "decode_1/decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/GreaterEqual/Enter"
  op: "Enter"
  input: "decode_1/decoder/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/GreaterEqual"
  op: "GreaterEqual"
  input: "decode_1/decoder/while/add"
  input: "decode_1/decoder/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/LogicalOr_1"
  op: "LogicalOr"
  input: "decode_1/decoder/while/LogicalOr"
  input: "decode_1/decoder/while/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "decode_1/decoder/while/Identity_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_1/decoder/while/LogicalNot_1"
  input: "decode_1/decoder/while/LogicalOr_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Shape"
  op: "Shape"
  input: "decode_1/decoder/while/Identity_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_1/decoder/while/add_1/y"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/add_1"
  op: "Add"
  input: "decode_1/decoder/while/Identity"
  input: "decode_1/decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Fill"
  op: "Fill"
  input: "decode_1/decoder/while/Shape"
  input: "decode_1/decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select"
  op: "Select"
  input: "decode_1/decoder/while/LogicalAnd"
  input: "decode_1/decoder/while/Fill"
  input: "decode_1/decoder/while/Identity_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_1/Enter"
  op: "Enter"
  input: "decode_1/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_1"
  op: "Select"
  input: "decode_1/decoder/while/Identity_8"
  input: "decode_1/decoder/while/Select_1/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_2/Enter"
  op: "Enter"
  input: "decode_1/decoder/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_2"
  op: "Select"
  input: "decode_1/decoder/while/Identity_8"
  input: "decode_1/decoder/while/Select_2/Enter"
  input: "decode_1/decoder/while/BasicDecoderStep/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_3"
  op: "Select"
  input: "decode_1/decoder/while/Identity_8"
  input: "decode_1/decoder/while/Identity_3"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_4"
  op: "Select"
  input: "decode_1/decoder/while/Identity_8"
  input: "decode_1/decoder/while/Identity_4"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Select_5"
  op: "Select"
  input: "decode_1/decoder/while/Identity_8"
  input: "decode_1/decoder/while/Identity_6"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decode_1/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decode_1/decoder/while/Identity"
  input: "decode_1/decoder/while/Select_1"
  input: "decode_1/decoder/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decode_1/decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode_1/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decode_1/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decode_1/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "decode_1/decoder/while/Identity"
  input: "decode_1/decoder/while/Select_2"
  input: "decode_1/decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/add_2/y"
  op: "Const"
  input: "^decode_1/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/add_2"
  op: "Add"
  input: "decode_1/decoder/while/Identity"
  input: "decode_1/decoder/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration"
  op: "NextIteration"
  input: "decode_1/decoder/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "decode_1/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "decode_1/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "decode_1/decoder/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "decode_1/decoder/while/Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "decode_1/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "decode_1/decoder/while/Select_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "decode_1/decoder/while/BasicDecoderStep/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_8"
  op: "NextIteration"
  input: "decode_1/decoder/while/LogicalOr_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/NextIteration_9"
  op: "NextIteration"
  input: "decode_1/decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit"
  op: "Exit"
  input: "decode_1/decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_1"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_2"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_3"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_4"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_5"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_6"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_7"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_8"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/while/Exit_9"
  op: "Exit"
  input: "decode_1/decoder/while/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decode_1/decoder/TensorArray"
  input: "decode_1/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack/range"
  op: "Range"
  input: "decode_1/decoder/TensorArrayStack/range/start"
  input: "decode_1/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "decode_1/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decode_1/decoder/TensorArray"
  input: "decode_1/decoder/TensorArrayStack/range"
  input: "decode_1/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 103
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decode_1/decoder/TensorArray_1"
  input: "decode_1/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "decode_1/decoder/TensorArrayStack_1/range/start"
  input: "decode_1/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "decode_1/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decode_1/decoder/TensorArray_1"
  input: "decode_1/decoder/TensorArrayStack_1/range"
  input: "decode_1/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_1/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_1/decoder/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/range"
  op: "Range"
  input: "decode_1/decoder/range/start"
  input: "decode_1/decoder/Rank"
  input: "decode_1/decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_2/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_2"
  op: "ConcatV2"
  input: "decode_1/decoder/concat_2/values_0"
  input: "decode_1/decoder/range"
  input: "decode_1/decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/transpose"
  op: "Transpose"
  input: "decode_1/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "decode_1/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/Rank_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/range_1/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_1/decoder/range_1/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_1/decoder/range_1"
  op: "Range"
  input: "decode_1/decoder/range_1/start"
  input: "decode_1/decoder/Rank_1"
  input: "decode_1/decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_3/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_3/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_1/decoder/concat_3"
  op: "ConcatV2"
  input: "decode_1/decoder/concat_3/values_0"
  input: "decode_1/decoder/range_1"
  input: "decode_1/decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decode_1/decoder/transpose_1"
  op: "Transpose"
  input: "decode_1/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "decode_1/decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "decode/decoder/transpose_1"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "train_pred"
  op: "Identity"
  input: "strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "concat"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "NotEqual_2/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "NotEqual_2"
  op: "NotEqual"
  input: "strided_slice_4"
  input: "NotEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "NotEqual_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/Shape"
  op: "Shape"
  input: "decode/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_loss/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_loss/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "sequence_loss/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_loss/strided_slice"
  op: "StridedSlice"
  input: "sequence_loss/Shape"
  input: "sequence_loss/strided_slice/stack"
  input: "sequence_loss/strided_slice/stack_1"
  input: "sequence_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequence_loss/Reshape/shape/0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_loss/Reshape/shape"
  op: "Pack"
  input: "sequence_loss/Reshape/shape/0"
  input: "sequence_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_loss/Reshape"
  op: "Reshape"
  input: "decode/decoder/transpose"
  input: "sequence_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_loss/Reshape_1"
  op: "Reshape"
  input: "output"
  input: "sequence_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "sequence_loss/Reshape"
  input: "sequence_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/Reshape_2/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_loss/Reshape_2"
  op: "Reshape"
  input: "ToFloat"
  input: "sequence_loss/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/mul"
  op: "Mul"
  input: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_loss/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_loss/Sum"
  op: "Sum"
  input: "sequence_loss/mul"
  input: "sequence_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_loss/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_loss/Sum_1"
  op: "Sum"
  input: "ToFloat"
  input: "sequence_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_loss/add/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "sequence_loss/add"
  op: "Add"
  input: "sequence_loss/Sum_1"
  input: "sequence_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_loss/truediv"
  op: "RealDiv"
  input: "sequence_loss/Sum"
  input: "sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Assign"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "OptimizeLoss/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/read"
  op: "Identity"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/Shape"
  input: "OptimizeLoss/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_1"
  input: "OptimizeLoss/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge"
  input: "decode/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add/y"
  op: "Const"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch:1"
  input: "OptimizeLoss/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_sync"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_1"
  input: "OptimizeLoss/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_2"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_1"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_1:1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_1"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_4"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_4"
  input: "OptimizeLoss/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_2"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_1"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch_2:1"
  input: "OptimizeLoss/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_2"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_5"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_5"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_3"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_5"
  input: "OptimizeLoss/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_3"
  input: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_6"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_3"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_3"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub_1"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_3:1"
  input: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_3"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_7"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/Fill"
  input: "sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Sum"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Neg"
  op: "Neg"
  input: "sequence_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Neg"
  input: "sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv_1"
  input: "sequence_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Fill"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/mul"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Sum_1"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape"
  input: "^OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape"
  input: "^OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/sequence_loss/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/truediv_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Shape"
  op: "Shape"
  input: "sequence_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape"
  op: "Shape"
  input: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Tile"
  input: "sequence_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/mul"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Sum"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/mul_1"
  op: "Mul"
  input: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "OptimizeLoss/gradients/sequence_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/sequence_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like"
  op: "ZerosLike"
  input: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/sequence_loss/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Reshape_grad/Shape"
  op: "Shape"
  input: "decode/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/sequence_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/sequence_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "OptimizeLoss/gradients/sequence_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decode/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/sequence_loss/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decode/decoder/TensorArray"
  input: "decode/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decode/decoder/while/Exit_1"
  input: "^OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decode/decoder/TensorArrayStack/range"
  input: "OptimizeLoss/gradients/decode/decoder/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "decode/decoder/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "decode/decoder/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "decode/decoder/while/Exit_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "decode/decoder/while/Exit_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_6_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Exit_7_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/Exit_1_grad/b_exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/Exit_4_grad/b_exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/Exit_7_grad/b_exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/Switch"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/Switch:1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/Switch"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/Switch:1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/Switch"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/Switch:1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Enter_7_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decode/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "decode/decoder/while/Identity"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^OptimizeLoss/gradients/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/Enter"
  input: "decode/decoder/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/Enter"
  input: "decode/decoder/while/Identity_8"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/Enter"
  input: "decode/decoder/while/Identity_4"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Enter_7_grad/Exit"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Enter_7_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad"
  input: "^OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Enter_7_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/cond_grad:1"
  input: "^OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Enter_7_grad/Exit"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/Merge_7_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/cond_grad:1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "decode/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/zeros_like/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  input: "^add"
  input: "^OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_4"
  op: "Switch"
  input: "TrainingHelper/zeros_like"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape_1"
  op: "Shape"
  input: "OptimizeLoss/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_1"
  op: "Fill"
  input: "OptimizeLoss/gradients/Shape_1"
  input: "OptimizeLoss/gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Merge_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2/Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^OptimizeLoss/gradients/StackPushV2"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Switch"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_5"
  op: "Switch"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape_2"
  op: "Shape"
  input: "OptimizeLoss/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Enter"
  input: "OptimizeLoss/gradients/Shape_2"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_6/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_6"
  op: "Switch"
  input: "OptimizeLoss/gradients/Switch_6/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Switch_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_2/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_2"
  op: "Fill"
  input: "OptimizeLoss/gradients/StackPopV2"
  input: "OptimizeLoss/gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_7"
  op: "Switch"
  input: "TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "decode/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape_3"
  op: "Shape"
  input: "OptimizeLoss/gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_3/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_3"
  op: "Fill"
  input: "OptimizeLoss/gradients/Shape_3"
  input: "OptimizeLoss/gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/zeros_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Const_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_8"
  op: "Switch"
  input: "OptimizeLoss/gradients/Const_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge_grad/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Const_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/Switch_8:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Shape"
  op: "Shape"
  input: "TrainingHelper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros"
  op: "Fill"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_2"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2_grad/cond_grad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter_grad/b_acc_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_1"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_2"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "TrainingHelper/TensorArray"
  input: "OptimizeLoss/gradients/AddN_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/AddN_2"
  input: "^OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "TrainingHelper/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/AddN_2"
  input: "^OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/AddN_2"
  input: "^OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1_grad/cond_grad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/AddN_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/mod/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/checked_cell_output"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/Enter_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/mod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul"
  op: "BatchMatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1"
  op: "BatchMatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: true
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/TrainingHelper/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/TrainingHelper/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/zeros"
  op: "Fill"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "g\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Size"
  op: "Size"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Size"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ToInt32"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ExpandDims"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/strided_slice"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/TrainingHelper/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "concat"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Reshape/shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ExpandDims_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/sub"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/SequenceMask/Less"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/zeros_like"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul_1/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul_1/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like_grad/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/mul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/ones_like_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Size"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/add/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/add/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range/start"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range/delta"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range"
  op: "Range"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range/start"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Size"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Fill/value"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/range"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/mod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Maximum/y"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/Select_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Tile"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul_1/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter"
  input: "^decode/decoder/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/zeros"
  op: "Fill"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot_grad/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/add/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot_grad/Reshape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_3"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_4"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/AddN_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_4"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_4"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decode/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/Reshape_1_grad/Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Neg"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh_grad/TanhGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh_grad/TanhGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_5"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/MatMul/Enter_grad/b_acc_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape_1"
  op: "Shape"
  input: "decode/BahdanauAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_5"
  input: "decode/BahdanauAttention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/mul"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Sum"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/mul_1"
  op: "Mul"
  input: "rnn/transpose"
  input: "OptimizeLoss/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/mod/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/Enter_1"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/mod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/Reshape_grad/Shape"
  op: "Shape"
  input: "decode/BahdanauAttention/SequenceMask/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/BahdanauAttention/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "decode/decoder/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_6"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/AddN_6"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/Enter"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 484
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_7"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 228
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Shape"
  op: "Shape"
  input: "decode/decoder/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/while/Identity_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/Enter"
  input: "decode/decoder/while/Identity_7"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/decode/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/mod"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/AddN_7"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/AddN_7"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_8"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/mul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_9"
  op: "AddN"
  input: "OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/decode/decoder/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "rnn/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_7_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/decode/decoder/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "rnn/while/Exit_1"
  input: "^OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn/TensorArrayStack/range"
  input: "OptimizeLoss/gradients/rnn/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "rnn/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/Exit_1_grad/b_exit"
  input: "OptimizeLoss/gradients/rnn/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/rnn/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_1_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/Switch"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/Switch:1"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/GRUCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/GRUCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/rnn/GRUCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_10"
  op: "AddN"
  input: "OptimizeLoss/gradients/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_10"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_10"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/Enter"
  input: "rnn/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/Enter"
  input: "rnn/while/rnn/gru_cell/split:1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/Enter"
  input: "rnn/while/rnn/gru_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/Enter"
  input: "rnn/while/rnn/gru_cell/sub"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Neg"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Tanh_grad/TanhGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Tanh_grad/TanhGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "rnn/while/rnn/gru_cell/concat_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/mod/Const"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/Enter"
  input: "rnn/while/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/Enter_1"
  input: "rnn/while/rnn/gru_cell/mul"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/mod"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/gru_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/Enter"
  input: "rnn/while/rnn/gru_cell/split"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_11"
  op: "AddN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/AddN_11"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  input: "rnn/while/rnn/gru_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn/while/rnn/gru_cell/concat"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 356
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_12"
  op: "AddN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_12"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_13"
  op: "AddN"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/rnn/gru_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn/TensorArray_1"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "g\000\000\000\000\000\000\000d\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Size"
  op: "Size"
  input: "input"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Size"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ToInt32"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ExpandDims"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/strided_slice"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "input"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Reshape"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Reshape"
  input: "OptimizeLoss/gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/concat_1"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/embed_1/embedding_lookup_grad/Reshape_1"
  input: "OptimizeLoss/gradients/embed/embedding_lookup_grad/Reshape_1"
  input: "OptimizeLoss/gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "OptimizeLoss/loss"
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss"
  op: "ScalarSummary"
  input: "OptimizeLoss/loss/tags"
  input: "sequence_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam"
  input: "OptimizeLoss/embed/embeddings/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/embed/embeddings/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  input: "OptimizeLoss/embed/embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/embed/embeddings/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 356
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/memory_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 484
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 103
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 103
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/epsilon"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Unique"
  op: "Unique"
  input: "OptimizeLoss/gradients/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Shape"
  op: "Shape"
  input: "OptimizeLoss/train/update_embed/embeddings/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/train/update_embed/embeddings/Shape"
  input: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack"
  input: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack_1"
  input: "OptimizeLoss/train/update_embed/embeddings/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "OptimizeLoss/gradients/concat"
  input: "OptimizeLoss/train/update_embed/embeddings/Unique:1"
  input: "OptimizeLoss/train/update_embed/embeddings/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub"
  op: "Sub"
  input: "OptimizeLoss/train/update_embed/embeddings/sub/x"
  input: "OptimizeLoss/beta2_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Sqrt"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_embed/embeddings/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul"
  op: "Mul"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/update_embed/embeddings/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_1"
  op: "Sub"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_1/x"
  input: "OptimizeLoss/beta1_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/truediv"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_embed/embeddings/mul"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_2/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_2"
  op: "Sub"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_2/x"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_1"
  op: "Mul"
  input: "OptimizeLoss/train/update_embed/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_2"
  op: "Mul"
  input: "OptimizeLoss/embed/embeddings/Adam/read"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Assign"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/ScatterAdd"
  op: "ScatterAdd"
  input: "OptimizeLoss/embed/embeddings/Adam"
  input: "OptimizeLoss/train/update_embed/embeddings/Unique"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_1"
  input: "^OptimizeLoss/train/update_embed/embeddings/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_3"
  op: "Mul"
  input: "OptimizeLoss/train/update_embed/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_embed/embeddings/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_3/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/sub_3"
  op: "Sub"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_3/x"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_4"
  op: "Mul"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_3"
  input: "OptimizeLoss/train/update_embed/embeddings/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_5"
  op: "Mul"
  input: "OptimizeLoss/embed/embeddings/Adam_1/read"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/ScatterAdd_1"
  op: "ScatterAdd"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_embed/embeddings/Unique"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_4"
  input: "^OptimizeLoss/train/update_embed/embeddings/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/Sqrt_1"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_embed/embeddings/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/mul_6"
  op: "Mul"
  input: "OptimizeLoss/train/update_embed/embeddings/truediv"
  input: "OptimizeLoss/train/update_embed/embeddings/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/add"
  op: "Add"
  input: "OptimizeLoss/train/update_embed/embeddings/Sqrt_1"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/truediv_1"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_embed/embeddings/mul_6"
  input: "OptimizeLoss/train/update_embed/embeddings/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/AssignSub"
  op: "AssignSub"
  input: "embed/embeddings"
  input: "OptimizeLoss/train/update_embed/embeddings/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_embed/embeddings/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_embed/embeddings/AssignSub"
  input: "^OptimizeLoss/train/update_embed/embeddings/ScatterAdd"
  input: "^OptimizeLoss/train/update_embed/embeddings/ScatterAdd_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/gates/kernel"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_rnn/gru_cell/gates/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/gates/bias"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/candidate/kernel"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/candidate/bias"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/rnn/while/rnn/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/memory_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/memory_layer/kernel"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/BahdanauAttention/memory_layer/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_wrapper/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/bahdanau_attention/mul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/output_projection_wrapper/attention_wrapper/attention_layer/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/kernel"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decode/decoder/output_projection_wrapper/bias"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/decode/decoder/while/BasicDecoderStep/decoder/output_projection_wrapper/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/mul"
  op: "Mul"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/train/beta1"
  input: "^OptimizeLoss/train/update_embed/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/memory_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/mul_1"
  op: "Mul"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/train/beta2"
  input: "^OptimizeLoss/train/update_embed/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/memory_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_embed/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/memory_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decode/decoder/output_projection_wrapper/bias/ApplyAdam"
  input: "^OptimizeLoss/train/Assign"
  input: "^OptimizeLoss/train/Assign_1"
}
node {
  name: "OptimizeLoss/train/value"
  op: "Const"
  input: "^add"
  input: "^OptimizeLoss/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train"
  op: "AssignAdd"
  input: "global_step"
  input: "OptimizeLoss/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/control_dependency"
  op: "Identity"
  input: "sequence_loss/truediv"
  input: "^OptimizeLoss/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_loss/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "decode_1/decoder/transpose_1"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "predictions"
  op: "Identity"
  input: "strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "sequence_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^embed/embeddings/Assign"
  input: "^rnn/gru_cell/gates/kernel/Assign"
  input: "^rnn/gru_cell/gates/bias/Assign"
  input: "^rnn/gru_cell/candidate/kernel/Assign"
  input: "^rnn/gru_cell/candidate/bias/Assign"
  input: "^decode/memory_layer/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Assign"
  input: "^decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/kernel/Assign"
  input: "^decode/decoder/output_projection_wrapper/bias/Assign"
  input: "^OptimizeLoss/learning_rate/Assign"
  input: "^OptimizeLoss/beta1_power/Assign"
  input: "^OptimizeLoss/beta2_power/Assign"
  input: "^OptimizeLoss/embed/embeddings/Adam/Assign"
  input: "^OptimizeLoss/embed/embeddings/Adam_1/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/gates/kernel/Adam/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/gates/bias/Adam/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/candidate/bias/Adam/Assign"
  input: "^OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1/Assign"
  input: "^OptimizeLoss/decode/memory_layer/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/memory_layer/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam/Assign"
  input: "^OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "embed/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "decode/memory_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/embed/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 49
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: "global_step"
        string_val: "embed/embeddings"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "decode/memory_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/kernel"
        string_val: "decode/decoder/output_projection_wrapper/bias"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/embed/embeddings/Adam"
        string_val: "OptimizeLoss/embed/embeddings/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "embed/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "decode/memory_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "decode/decoder/output_projection_wrapper/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/embed/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 49
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: "global_step"
        string_val: "embed/embeddings"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "decode/memory_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/kernel"
        string_val: "decode/decoder/output_projection_wrapper/bias"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/embed/embeddings/Adam"
        string_val: "OptimizeLoss/embed/embeddings/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "OptimizeLoss/loss"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_3a1fe054c5844fc6aa050e6694f788a4/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam"
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
        string_val: "OptimizeLoss/embed/embeddings/Adam"
        string_val: "OptimizeLoss/embed/embeddings/Adam_1"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
        string_val: "decode/decoder/output_projection_wrapper/bias"
        string_val: "decode/decoder/output_projection_wrapper/kernel"
        string_val: "decode/memory_layer/kernel"
        string_val: "embed/embeddings"
        string_val: "global_step"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/gates/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  input: "OptimizeLoss/embed/embeddings/Adam"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  input: "OptimizeLoss/learning_rate"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  input: "decode/decoder/output_projection_wrapper/bias"
  input: "decode/decoder/output_projection_wrapper/kernel"
  input: "decode/memory_layer/kernel"
  input: "embed/embeddings"
  input: "global_step"
  input: "rnn/gru_cell/candidate/bias"
  input: "rnn/gru_cell/candidate/kernel"
  input: "rnn/gru_cell/gates/bias"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel/Adam_1"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v/Adam_1"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel/Adam_1"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias/Adam_1"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel/Adam_1"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias/Adam_1"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel/Adam_1"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/bias/Adam_1"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "OptimizeLoss/decode/decoder/output_projection_wrapper/kernel/Adam_1"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "OptimizeLoss/decode/memory_layer/kernel/Adam_1"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/embed/embeddings/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/embed/embeddings/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "OptimizeLoss/embed/embeddings/Adam_1"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/bias/Adam_1"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam"
  input: "save/RestoreV2_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/candidate/kernel/Adam_1"
  input: "save/RestoreV2_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam"
  input: "save/RestoreV2_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/bias/Adam_1"
  input: "save/RestoreV2_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam"
  input: "save/RestoreV2_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "OptimizeLoss/rnn/gru_cell/gates/kernel/Adam_1"
  input: "save/RestoreV2_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
  input: "save/RestoreV2_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
  input: "save/RestoreV2_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
  input: "save/RestoreV2_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
  input: "save/RestoreV2_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
  input: "save/RestoreV2_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
  input: "save/RestoreV2_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
  input: "save/RestoreV2_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/attention_wrapper/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 484
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/bias"
  input: "save/RestoreV2_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "decode/decoder/output_projection_wrapper/kernel"
  input: "save/RestoreV2_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/decoder/output_projection_wrapper/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 103
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decode/memory_layer/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "decode/memory_layer/kernel"
  input: "save/RestoreV2_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_43/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "embed/embeddings"
      }
    }
  }
}
node {
  name: "save/RestoreV2_43/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_43"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_43/tensor_names"
  input: "save/RestoreV2_43/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "embed/embeddings"
  input: "save/RestoreV2_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embed/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 103
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_44/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_44/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_44"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_44/tensor_names"
  input: "save/RestoreV2_44/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_44"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_45/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/gru_cell/candidate/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_45/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_45"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_45/tensor_names"
  input: "save/RestoreV2_45/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias"
  input: "save/RestoreV2_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_46/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/gru_cell/candidate/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_46/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_46"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_46/tensor_names"
  input: "save/RestoreV2_46/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel"
  input: "save/RestoreV2_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_47/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/gru_cell/gates/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_47/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_47"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_47/tensor_names"
  input: "save/RestoreV2_47/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias"
  input: "save/RestoreV2_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_48/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "rnn/gru_cell/gates/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_48/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_48"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_48/tensor_names"
  input: "save/RestoreV2_48/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel"
  input: "save/RestoreV2_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 356
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
